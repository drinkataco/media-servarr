# Default library values
nameOverride: ''
fullnameOverride: ''

#
# Secrets to create
#
secrets: []
  # - name: 'apiKey'
  #   value: 'e71e2f1da39e4918ba0a9c5355166268'

#
# Application Config
# Here you can define configuration to be used and mounted as a ConfigMap
#
application:
  config:
    # # Filename of configuration
    # filename: 'config.xml'
    # # Configuration file contents
    # contents: |
    #   <Config>
    #     <Port>7878</Port>
    #     <UrlBase>dashboard</UrlBase>
    #     <ApiKey>$apiKey</ApiKey>
    #   </Config>
    # # Secrets to inject. In the config they must be defined as $secretname
    # secrets: [ 'apiKey' ]
    # # Path to mount the file to in the application
    # mountPath: '/config/config.xml'

#
# Resource - DEPLOYMENT
# This is to set up and define the application deployment
#
deployment:
  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  container:
    image:
      repository: 'nginx'
      tag: ''
      pullPolicy: 'IfNotPresent'

    ports:
      - name: 'http'
        containerPort: 80
        protocol: 'TCP'

    livenessProbe:
      httpGet:
        path: '/'
        port: 'http'
      initialDelaySeconds: 30
    readinessProbe:
      httpGet:
        path: '/'
        port: 'http'
      initialDelaySeconds: 15

    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
      - name: 'foo'
        mountPath: "/etc/foo"
        readOnly: true

  volumes: {}
    # config:
    #   persistentVolumeClaim:
    #     claimName: 'app-config'
    # downloads:
    #   emptyDir: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

persistentVolumeClaims: {}
  # app-config:
  #   accessMode: 'ReadWriteOnce'
  #   requestStorage: '1Gi'
  #   storageClassName: 'manual'
  #   selector: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: 'default'

service:
  type: 'ClusterIP'
  ports:
    - port: 80
      targetPort: 'http'
      protocol: 'TCP'
      name: 'http'

ingress:
  enabled: false
  className: ''
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ''
      paths:
        - path: '/'
          pathType: 'ImplementationSpecific'
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  # TODO: Replace with this / merge with metrics
  host: 'media-servarr.local' # TODO: use this?

metrics:
  enabled: false
  app: # TODO: could we use this from other values
    name:
    port: # TODO: This is the FOURTH time this is defined. How can we simplify this?
  nameSuffix: '-exportarr'
  image:
    repository: 'ghcr.io/onedr0p/exportarr'
    tag: 'v1.6.1'
    pullPolicy: 'IfNotPresent'
  port:
    name: 'monitoring'
    number: 9707
  resources:
    requests:
      cpu: '100m'
      memory: '64Mi'
    limits:
      cpu: '500m'
      memory: '256Mi'
  serviceMonitor:
    interval: '4m'
    scrapeTimeout: '90s'
    path: '/metrics'
